1:语法高亮方案:
2:区域高亮方案
3:使用脚本
	1:脚本类型:
		全局插件组: 该组包含的脚本会在vim启动时,或者用户执行某些特定
			的函数时,才会初始化(为已经定义了的函数添加功能, 根据用户
			的需求修改某些特性)
		文件类型插件组: 改组包含的脚本和某种特定的文件类型相关联,只有
			相应的类型的文件被打开或创建时才会加载脚本,组内脚本的功能
			可以是为某个特定的文件类型添加特性,还可以是某些特定的工具
	2:安装脚本:
		一个单一的.vim文件
		一个压缩的文件(里面包含一个或多个.vim文件以及文档)
		.vimball格式,一种vim脚本安装文件
		单一脚本文件放置到plugin目录下
		与某种文件类型相关脚本复制到ftplugin目录下
		如果多用户共享,需要把脚本复制到vim的安装目录(/usr/share/vim)
		个人使用复制到~/.vim下即可

4:脚本开发
	1:脚本开发基础
		类型:只有两种类型: 字符串, 数值
		变量: 5中变量
			字符串
			数值
			线性表: 含有多个条目的有序序列(有序数组)
			字典: 一个无序的关联数组, 键值对
			函数引用: 指向一个函数的引用
		函数调用:
			echo MyFunc()
			call MyFunc()
		作用域: 8中作用域
			v:	Vim预定义的全局作用域
			g:	全局作用域
			b:	缓冲区作用域--只在定义变量的缓冲区内有效
			t:	标签作用域--只在定义变量的标签页内有效
			w:	窗口作用域--只在当前窗口内有效
			l:	函数作用域--只在定义它的函数内部有效
			s:	来源文件作用域--只在通过命令:source加载的文件内有效
			a:	参数作用域--专门用于函数的参数
		注释: 引号开始之后的文本
		条件:
			if -- elseif -- else -- endif
		循环:
			for var in range(1,10)|list|dict
				Do-Something
			endfor
			while x <= 5
				Do-Something
			endwhile

		注意:
			字符串和数值类型可以自动转换
			线性表: let mylist = [1,2"three","four",5]
					let mylist = [[1,2,3],["four","five","six"]]
			字典:	let mydic = {1:"one",2:"two",3:"three"}
			函数引用:	let myfunc = function("myfunction");
			变量名通常以大写字母开始
			定义变量时,没有指定作用域默认是全局作用域
