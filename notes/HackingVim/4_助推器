1:模版:
	1:模版文件:
		mkdir ~/.vim/templates/
		autocmd BufNewFile *.c 0r $VIMHOME/templates/c.tpl
		autocmd BufNewFile *.c 0r ~/.vim/templates/c.tpl
		命令功能:无论何时打开一个新文件,vim就在模版中搜索以文件扩展名
		  的模版,比如,创建一个index.html文件文件时,如果就在$VIMHOME/
		  templates/下搜索html.tpl的模版文件,如果没有就创建一个空文件
		autocmd BUfNewFile * silent! 0r $VIMHOME/templates/%:e.tpl
		
	2:把缩写写作为模版


2:TagList
	1:概念
		Exuberant Ctags: 用于C,C++,Java,Perl,Python,Vim,Ruby
					 (以及其他25种语言)
		Vtags: 用于Verilog文件
		Jtags: 用于Java文件
		Hdrtags: 用于C/C++,Asm,Lex/Yacc,LaTeX,Vim,Maple
		Ptags: 用于Perl文件
	2:命令
		ctags *.c *.h
		:set tags=/path/to/tags
		<C-]>	# 在tags文件中查看函数的定义,
			# 只找到一个匹配,光标直接跳转到定义函数的地方
			# 找到多个匹配,vim把这些匹配以列表的形式显示出来
	3:相关插件:
		VIM=http://www.vim.org/scripts/scripts.php?
		lookupfile.vim		$VIM/script_id=1581
		taglist.vim			$VIM/script_id=273
		ctags.vim			$VIM/script_id=610
		autoproto.vim		$VIM/script_id=1553


3:自动补全
	1:已知单词的自动补全
		<C-n>				# 正序排列补全的单词列表
		<C-p>				# 逆序排补全的单词列表
	2:使用字典的自动补全
		:set dictionary+=/path/file/word
		<C-x-k>				# <C-x>补全模式,<C-k>在字典中查询关键字
		<C-x>
			<C-l>			# 补全一整行文本
			<C-n>			# 从当前缓冲区中补全单词
			<C-k>			# 从字典中补全单词
			<C-t>			# 从同义字典中补全单词(:help thesaurus)
			<C-i>			# 从当前文件被包含的文件中补全单词
			S				# 拼写建议
	3:多合一补全
		:help ins-completion	# 插入模式补全


4:宏录制
	2:命令:
		qa				# 开始录制,并记录到寄存器a中,
		q				# 结束录制
		@a				# 执行记录在寄存器a中的宏
		N@a				# 执行寄存器a中的命令N次
		@@				# 执行上一次所执行的宏命令

5:会话
	1:简单的会话使用
		:mksession FILE			# 保存当前会话
		:mkview FILE			# 保存当前视图
			# 不指定会话或视图的文件名,则默认保存到当前目录的
			# Session.vim文件中,覆盖,需要加!
		:set viewdir=$HOME/.vim/views
			# 指定视图文件保存的目录
		vim -S sesssion.vim		# 以相同的会话来启动vim
		:source Session.vim		# 加载会话文件
		:loadview View.vim		# 加载视图文件
		注意: 加载一个会话会改变编辑器的整体布局,而加载一个视图则只是
			会改变当前活动窗口的布局

		set viewdir=~/.vim/views/
		autocmd BufWinLeave * mkview
		autocmd BufWinEnter * silent loadview
		无论何时在同一个窗口中打开另一个缓冲区,之前的缓冲区的视图都会
			被自动保存下来,并且当再次打开之前的缓冲区时,会自动还原保
			存的视图

		autocmd VimEnter * call LoadSession()
		autocmd VimLeave * call SaveSession()
		function! SaveSession()
			execute 'mksession ~/.vim/sessions/session.vim'
		endfunction
		function! LoadSession()
			if argc() == 0
				execute 'source ~/.vim/sessions/session.vim'
			endif
		endfunction
	2:满足个人的会话需求
		:set sessionoptions=OPT
		OPT为都好分割的列表
			blank		保存空白窗口
			buffers 	保存所有缓冲区的信息,包括隐藏的与未加载的
						缓冲区
			curdir		保存当前工作目录的相关信息
			folds 		保存缓冲区内容中的折叠信息
			globals 	保存全局变量的相关信息,这里的全局变量指的是
						以大写字母开始,且类型为字符串或数值的变量
			help 		保存帮助窗口
			localoptions保存用户在单个窗口中创建的局部变量与局部映射
						的相关信息
			options		保存所有的选项信息,包含全局的与局部的
			resize		保存UI窗口的尺寸信息(行数与列数)
			sesdir		如果设置了该选项,当前目录就会是会话文件的存放
						目录(如果同时设置了curdir,则该选项不可用)
			slash		把所有文件路径中的反斜杆换成斜杆(这样做就可以
						让Unix兼容Windows的文件路径)
			tabpages	保存所有的标签页信息,如果没有设置该选项,则只
						会保存当前处于活跃状态的标签页
			unix		使用 Unix 格式的行结束符,而非Windows格式
			winpos 		保存UI窗口的屏幕位置信息
			winsize 	保存所有打开窗口的尺寸
		默认配置有:
			blank	buffers		folds		help		options
			tabpages	winsize
		:echo &sessionoptions	# 显示当前会话选项
	3:会话与项目管理


6:寄存器与撤销分支
	寄存器: 一种带有多个缓冲区的高级剪贴板,可以用来存放被剪切,删除
		或复制的文本
	撤销分支: vim版本控制的一种简单形式,利用撤销分支,用户可以把文件
		回滚到某个特定的时刻,或者是回滚一定的次数,
	1:寄存器:
		寄存器的名字都以双引号开始,例如 "x
		使用寄存器:  "xy (复制), "xx(剪切), "xd
		:registers				# 查看用户使用了哪些寄存器
		1):匿名寄存器
		2):行内寄存器: 
			如果用户删除的文本小于一行,那么vim就把删除的文存入到一个
			特殊的寄存器(行内寄存器),"- ,前提是用户没有指定其他的寄存
		3):带编号的寄存器: 
			"0 -- "9
			"0	总是包含最近一次删除/修改的文本,会被新文本覆盖
			"1	包含最近一次删除/修改的文本,如果用户指定了其他寄存器
				或文本的长度少于一行,"1就不会被覆盖
		4):命名寄存器:
			"a -- "z "A -- "Z
			小写寄存器: 和普通寄存器一样工作,新内容进来,原来内容覆盖
			大写寄存器: 新内容进来,把新内容追加到原有内容尾部
		5)只读寄存器:
			"%	包含了当前活动缓冲区的文件名
			"#	包含了当前活动缓冲区上一次打开的文件(备选文件)
			".	包含了当前最近一次插入的文本,".p重复黏贴复制
			":	包含上一次在命令模式执行的命令
		6):选择投递寄存器:
			"*		"+		"-
		7):黑洞寄存器:
			*_	进去的任意内容都无法再取回,如果用户希望彻底删除某些
				文本,也不想让任意一个寄存器记录被删除,
		8):搜索模式寄存器:
			"/	无论何时使用命令/,被搜索的模式都会自动存入搜索模式
				寄存器
			:let @/="PATTERN"	不执行搜索而修改寄存器
		9):表达式寄存器:
			"=	结果是字符串型(string(num)), <C-R>=(插入模式), 
				help expression(查看如何输入有效的表达式)
	2:撤销分支
		:undolist			# 查看撤销分支概览
		:undo N				# 切换到某个特定的修改号
		g-					# 在修改列表中后退
		g+					# 在修改列表中前进
		g-和u的区别: u命令只是单纯地撤销施加在文本上的修改,并不理会
			分支的变化,而命令g-则会按照分支来进行撤销(撤销分支可以
			使得用户可以访问文本曾经经历过的任何状态)
		:earlier {Ns|Nm|Nh}	# 在撤销历史中向前跳转
		:later {Ns|Nm|Nh}	# 在撤销历史中向后跳转


4:折叠:
	手动折叠: 右用户手动标出被折叠的范围(:help fold-manual)
	缩进折叠: 根据缩进来折叠文本(:help fold-indent)
	表达式折叠: 根据表达式来折叠文本(:help fold-expr)
	语法折叠: 根据语法来折叠文本(:help fold-syntax)
	差异折叠: 折叠未被修改的文本(:help fold-diff)
	标记折叠: 根据文本中插入的标记来折叠文本(:help fold-marker)
	:set foldenable		# 打开折叠
	:zc					# 关闭一个折叠
	:zM					# 关闭所有折叠
	:zo					# 打开一个折叠
	:zO					# 循环打开, 可视模式下所选区域打开
	:zR					# 打开所有折叠
	:zF					# 创建折叠
	:zd					# 删除折叠
	:zD					# 递归删除,可视模式下所选区域删除
	;zE					# 清楚窗口中所有的则跌
	:zj/k				# 折叠之间移动
	:nmap <sapce> za

	:set foldtext=MyFoldFunction()
	function! MyFoldFunction()
		let line = getline(v:foldstart)
		" cleanup unwanted things in first line"
		let sub = substitute(line, '/\*\|^\s+','','g')
		" calculate lines in folded text"
		let lines = v:foldend - v:	foldstart + 1
		return v:folddashes.sub. '...'.lines.' Lines...'.getline \
		(v:foldend)
	endfunction
	v:foldstart 	被折叠的第一行
	v:foldend		被折叠的最后一行
	v:folddashes	为每一层折叠包含一个连字符

	:set foldcolumn=N		# 折叠树的宽度
	:set folddoopen CMD		# 对所有打开的折叠中的行执行命令CMD
	:set folddoclose CMD	# 对所有关闭的折叠中的行执行命令CMD
	:set foldmethod=manual	# 设置折叠方式


5:打开任意文件
	:help netrw-externapp	# vim使用的外部程序帮组
	:help netrw-netrc
	vim http://192.168.24.128/wokao.html
	:Nread http://192.168.24.128/wokao.html
	:Nread scp://root@192.168.24.128/root
	vim所支持的协议:
		ftp		scp		sftp	rcp		http(Read-only)
		dav		rsync(Read-only)		fetch(Read-only)
