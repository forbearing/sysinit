1:在单个文件中更快的导航
	1:基于上下文的导航
		g,				# 普通模式下,遍历之前修改过的地方
		g;				# 普通模式下,反向遍历
		gd				# 返回变量定义的地方 (Goto Declaration)
		gD				# 查找变量全局定义的地方
		gj[k]			# 在长行内导航
			map <A-DOWN> gj
			map <A-UP> gk
			imap <A-DOWN>gja
			imap <A-UP> <esc>gka
	2:跳转:
		w				# 移动到下一个单词的首字母
		b				# 移动到上一个单词的首字母
		e				# 移动到下一个单词的尾部
		W,B				# 非空白字符组成一个单词
		()				# 句子
		{}				# 段落
		[[ / ][			# 向后/向前移动到下一节的开头(比如函数的开头)
		[] / ]]			# 向后/向前移动到下一节的结束(比如函数的末尾)
		[{				# 跳到块的开始
		]}				# 跳到块的结束
		[/				# 跳到注释块的开始
		]/				# 跳到注释块的结束
		%				# 代码块之间的跳转
2:在Vim帮组系统中更快的导航
	1:概念
		在vim帮助文档中右两种超链接:
			主题链接: "some subject"(引用到帮组系统中一节的开始)
			选项链接: "option"(引用到一个特定选项的描述)
		<C-]>				# 跳转到超链接指向的地址
		<C-T>				# 跳转到上一次浏览的帮组文档
	2:代码
		nmap <cr> <C-]>
		nmap <bs> <C-T>
		nmap o /[a-z]\{2,\}<cr>		# o前进到下一个选项链接
		nmap O ?[a-z]\{2,\}<cr>
		nmap s /\|\S\+\|<cr>
		nmap S ?\|\S\+\|<cr>		# s前进到下一个主题链接
3:在多个缓冲区中更快地导航
	1:命令
		:buffers					# 打开缓冲区列表
		:buffer N					# 打开对应的缓冲区
		:bnext						# 下一个缓冲区
		:bprevious					# 上一个缓冲区
	2:代码:
		map <C-h> <esc>:bn<cr>
		map <C-l> <esc>:bp<cr>
		map <C-n> <esc>:tabnew<cr>
		map <C-j> <esc>:tabp<cr>
		map <c-k> <esc>:tabn<cr>
4:快速打开引用过的文件
	1:命令:
		gf							# 打开引用的文件(goto file)

5:文件内搜索
	1:在当前文件内搜索
		:set incsearch				# 动态搜索
		:set hlsearc				# 高亮显示搜索结果
		#							# 向上搜索光标处的单词
		*							# 向下搜索光标处的单词
		g#							# 向上搜索包含单词的单词
		g*							# 向下搜索包含单词的单词
	2:在多个文件中搜索
		:vimgrep /pattern/ [j][g] file1 file2
	3:在帮助系统中搜索
		:helpgrep pattern [@LANG]
			必须参数: 待搜索的模式
			可选参数: 限定语言
			:helpgrep completion@zh
		:lhelpgrep				# 使用location列表,而不是quickfix列表


6:标记位置
	1:可见的标记--使用符号
		:highlight SignColumn ctermfg=darkgrey		# 自定义可见标记
		:sign define NAME ARG
		ARG可以是下面的几种
			linehl	用于标记行的色彩组
			text:	改文本将作为符号,显示在控制台vim中(如比 >>!! 或
					++) 每一个符号最多可以用两个字符
			texthl	用于标记符号文本的色彩组
			icon	图标的完整路径,改图标用在Gvim的符号中,图标足够小,
					小道可以放到两个字符的空间中,图标文件的格式可以是
					位图文件,不过最好是.xpm
		:sign define information text=!> linehl=Warning texthl=Error
			icon=/path/to/information.xpm
	2:隐藏的标记
0-9 	这个标记集来源于文件 .viminfo,通常保留给Vim内部使用(比如
		标记 0 表示文件最后一次退出时,光标所在的位置.然而,用户可以利
		用这些标记来实现 “打开最近使用过的文件”
a-z 	这些标记只在当前文件内有效,当文件关闭时删除这些标记.如果用户
		此时是在当前文件的缓冲区内,那么只能通过这些小写字母标记在文件
		内跳转
A-Z 	这些标记可以跨越文件使用.即使没有打开目的标记所在的文件,也可
		以直接跳转到标记所在的位置.如果.viminfo文件是可用的,那么这些
		标记就会被保存下来, 直到下一次对文件进行编辑
		:marks						# 获取标记列表
		:delmarks MARKID1 MARKID2	# 删除标记
			:delmarks a-c 1-4
		:delmarks!					# 删除所有标记
		;help mark-motion
