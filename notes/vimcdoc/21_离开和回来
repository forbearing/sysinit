1:挂起和继续
	<C-Z>			挂起
	:suspend		挂起
	fg

2:执行shell命令
	!{command}
	:!{program}             执行 {program}
	:r !{program}           执行 {program} 并读取其输出
	:w !{program}           执行 {program} 传送文本至其输入
	:[range]!{program}      经由 {program} 过滤文本
	:shell					产生一个新的shell
	:!xtern&


3:记忆有关会话信息:viminfo
	viminfo所存储的状态信息
		命令行和模式搜索的历史记录
		寄存器内文本
		跟踪文件的标记
		缓存器列表
		全局变量
	:set viminfo=<string>		viminfo默认设定的还原信息有限
	:set viminfo='1000			为1000个文件保存标记信息
	:set viminfo=='1000,f1		选项f控制是否存储全局标记(A-Z,0-9)
		0表示什么也不存储, 1表示不对f选项不作规定
	:set viminfo='1000,f1,<500	<控制着每个寄存器内保存几行文本,0表示不保存
		:       保存命令行历史记录内的行数
		@       保存输入行历史记录内的行数
		/       保存搜索历史记录内的行数
		r       可移介质，其上的文件不保存标记 (可用多次)
		!       以大写字母开头并且不含有小写字母的全局变量
		h       启动时关闭选项 'hlsearch' 高亮显示
		%       缓冲区列表 (只有当不带参数启动 Vim 时才用来恢复)
		c       用编码 'encoding' 转换文本
		n       用于 viminfo 文件的名称 (必须为最后一项选项)
	'0					重返中断处('1倒数第二个处理的文件)
	:oldfiles			历史编辑文件列表
	:e #<2				编辑第2个文件
	:split #<3
	:browse oldfiles	按q退出后,会有提示
	:wviminfo! ~/tmp/viminfo	保存viminfo信息
	:rviminfo! ~/tmp/viminfo	读取viminfo信息
		用来在两个同时运行的vim之间交换寄存器信息
		建一个目录,专门用来存放信息文件
 

4:会话
	vim会话保存了所有跟你的编辑相关信息,包括文件列表,窗口布局,全局变量,
	选项,及其其他信息(sessionoptions控制着什么信息被记住)
	:mksession vimbook.vim		创建一个vim会话
	:source vimbook.vim			还原会话
	vim -S vimbook.vim			还原会话
		-S也可以用来运行任何vim脚本

	sessionoptions
		blank		保留空窗口
		buffers		保留所有缓冲区
		curdir		当前目录
		folds		折叠,包括人工创建的
		help		帮助窗口
		options		所有选项和映射
		winsize		窗口代销
	:set sessionoptions+=resize			还原Vim窗口大小
	:set sessionoptions+=unix,slash		如果经常在win和Unix系统上编辑同一文件

	:mksession! ~/.vim/secret.vim
	:wviminfo! ~/.vim/secret.viminfo
	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo
		会话记录存储了不少东西,但不存储标记信息,寄存器以及命令行历史记录
		这时候需要利用vim信息文件,viminfo存储这些信息


5:视图
	会话记录存储了整个vim窗口外观,当你只需要为某个窗口存储特性时,得用到视图,
	视图的用处在于你要以某种特定的方式编辑一个文件,例如"number",折叠
	当你存储会话时,每个窗口的视图都存储了
	:mkview			存储当前窗口视图
	:loadview		编辑同一文件时
	:mkview 1
	:loadview 1
	:mkview ~/.vim/main.vim		命名视图
	:source ~/.vim/main.vim		加载命令视图


6:模式行
	为特定文件设定的特定的选项(shiftwidth)
	:set modelines=10		
	:set nomodeline		当root用户身份编辑文件,或不信任次文件时
	any-text vim:set {option}={value} ... : any-text		模式行格式
		any-text -- 表示你可以在 Vim 实际用到的部分之前和之后加任意文本,这就允许
			你使它看起来像个注释，正如上例采用了 /* 和 */.
		vim: -- 使 Vim 识别出这个模式行,在 "vim" 的前面必须有空格,除非 "vim"
			置于行首。因此像 "gvim:" 这样用法是不行的
