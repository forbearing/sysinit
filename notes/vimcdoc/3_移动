1:词移动
	w				向后移动一个单词,并定位单词词首
	W				向后移动, 以空白字符为停止点来跳动,而不是以一个单词来向后移动
	b				向前移动一个单词,并定位单词词首
	B				向前移动, 以空白字符为停止点来跳动,而不是以一个单词来向前移动
	e				向后移动一个单词,定位词尾
	E				向后移动,以空白字符为停止点来跳动
	ge				向前移动一个单词,定位词尾
	gE				向前移动,以空白字符为停止点来跳动
	>可以简单总结为
		1:大小写决定每一次移动的量
		2:w 和 b 的不同: w向后移动, b 向前移动
		3:e 和 ge 的区别: e 向后移动, ge 向前移动
		4:w和b 与 e 的不同: w和b是定位词首, e是定位词尾
	>如果你还不能分清楚细节,没事,记住有这几个快捷键就可以,这几个细节不是很重要

2:移动到行首或行尾
	$		行尾
	^		第一个非空字符
	0		第一个字符(包括空字符(空格,tab))

3:移动到指定字符
	f		后面接要查找的字符(不是字符串),向行末方向查找指定字符,光标定位在所查找字符处
	{num}f	直接定位到第{num}个查找到的字符
	F		向行首方向查找指定字符
	t		功能与f相同,与f区别就是, 光标定位在所查找字符的前一个字符处
	T		向行首方向查找
	;		向行末方向重复上一次查找
	,		向行首方向重复上一次查找

4:括号匹配
	%		括号匹配(括号之间跳转),代码中很有用,这些括号包括 {},[],()

5:移动到指定行
	gg		移动到行首
	G		移动到行尾
	{num}G	移动到指定行
	{num}%	移动到指定行的前一行
	H		Home,移动到当前编辑文档可视行行首
	M		Middle,移动当前编辑文档可视行中间
	L		Last,移动到当前编辑文档可视行末尾

6:确认当前位置
	CTRL-G					会在 vim 的最底下一栏中显示当前行所在位置
	:set nu{mber}			设置行号
	:set nonu{mber}			取消行号
	:set ruler				在vim窗口右下角显示当前光标位置(没啥用,既然碰到了就说下)

7:滚屏
	CTRL-D	向下滚动半屏
	CTRL-U	向上滚动半屏
	CTRL-F	向下滚动一屏(少两行)
	CTRL-B	向下滚动一屏(少两行)
	CTRL-E	屏幕上滚
	CTRL-Y	屏幕下滚
	zz		把光标所在行移动到中间
	zt		把光标所在行移动到顶部
	zb		把光标所在行移动到底部

8:简单查找
	/					正向查找
	?					反向查找
	n/N					查找下一个/上一个
	*					正向查找光标所在字符
	{num}*
	#					反向查找光标所在字符
	/\<{word}\>			查找整个单词,例如 /\<linux\> 表示查找
		\>是一个特殊的表示,表示只匹配单词末尾, \<表示只匹配单词开头
	:set ignorecase		查找忽略大小写,  简写为 :set ic
	:set noignorecase	查找不忽略大小写, 简写为 :set noic
	:set hlsearch		高亮匹配, 简写为 :set hls
	:set nohlsearch		取消高亮匹配, 简写为 :set nohls
	:nohlsearch			暂时关闭高亮匹配,下次搜索时又可以高亮显示
	:set incsearch		动态匹配(输入字符串就显示匹配点)
	:set noincsearch
	:set wrapscan		循环查找(默认开启)
	:set nowrapscan		关闭循环查找

9:跳转
	/{word}$			匹配所在行的最后一个
	/^{word}			匹配所在行的第一个
	/^{word}$			匹配仅包含{word}的行(不包含空格)
	.			匹配任何单个字符
	``			跳转到原来的地方
	''			同上(开头),不同的时,此快捷键只会定位在行首
	CTRL-O		跳到一个"较老"的地方,可多次跳动
	CTRL-I		跳到一个"较新"的地方,可多次跳动
	TAB			同上
	:jumps		列出可以跳往的列表,最后使用的标记用">"标记
	m{mark}		标记当前光标位置
	'{mark}		跳转到指定标记
	`{mark}		跳转到指定标记
	:marks		所有标记列表
		'	跳转前的光标位置
		"	最后编辑的光标位置
		[	最后修改的开始位置
		]	最后修改的结束位置
